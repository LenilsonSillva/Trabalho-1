{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Constants from 'expo-constants';\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport SearchBar from \"./Components/SearchBar\";\nexport default function Home(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      sender = _useState2[0],\n      setSender = _useState2[1];\n\n  useEffect(function () {\n    function getData() {\n      var response, sender;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('https://mobile.ect.ufrn.br:3002/emails'));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              sender = _context.sent;\n              setSender(sender);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getData();\n  }, []);\n\n  function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(TouchableOpacity, {\n      style: styles.senderBox,\n      activeOpacity: 0.99,\n      onPress: function onPress() {\n        navigation.navigate('Email', {\n          id: item\n        });\n      }\n    }, React.createElement(View, {\n      style: styles.senderImgBox\n    }, React.createElement(Image, {\n      style: styles.senderImg,\n      source: {\n        uri: item.picture\n      }\n    })), React.createElement(View, {\n      style: styles.senderInfo\n    }, React.createElement(Text, {\n      style: {\n        fontFamily: 'Arial',\n        color: 'rgb(60,60,60)'\n      }\n    }, item.to), React.createElement(Text, {\n      style: {\n        color: 'rgb(90,90,90)'\n      }\n    }, item.tittle), React.createElement(Text, {\n      style: {\n        color: 'grey'\n      }\n    }, item.summary)), React.createElement(View, {\n      style: styles.senderTimeFav\n    }, React.createElement(Text, {\n      style: styles.timeText\n    }, item.time), React.createElement(Icon, {\n      name: item.star ? 'star' : 'star-outline',\n      style: {\n        fontSize: 22\n      },\n      color: item.star ? 'orange' : 'rgb(90,90,90)'\n    })));\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(SearchBar, {\n    dados: sender\n  }), React.createElement(View, null, React.createElement(FlatList, {\n    data: sender,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    marginTop: Constants.statusBarHeight\n  },\n  senderBox: {\n    flex: 1,\n    height: 100,\n    flexDirection: 'row'\n  },\n  senderImg: {\n    width: 40,\n    height: 40,\n    borderRadius: 20\n  },\n  senderImgBox: {\n    marginVertical: 20,\n    marginHorizontal: 15\n  },\n  senderInfo: {\n    flex: 5,\n    justifyContent: 'center'\n  },\n  senderTimeFav: {\n    flex: 1,\n    alignItems: 'flex-end',\n    justifyContent: 'space-evenly',\n    padding: 10\n  },\n  timeText: {\n    color: 'rgb(90,90,90)',\n    fontSize: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/lenil/Documents/Estudos/Aulas/trabaho1/pages/Home/index.js"],"names":["React","useState","useEffect","Constants","Icon","SearchBar","Home","navigation","route","sender","setSender","getData","fetch","response","json","renderItem","item","styles","senderBox","navigate","id","senderImgBox","senderImg","uri","picture","senderInfo","fontFamily","color","to","tittle","summary","senderTimeFav","timeText","time","star","fontSize","container","StyleSheet","create","flex","backgroundColor","marginTop","statusBarHeight","height","flexDirection","width","borderRadius","marginVertical","marginHorizontal","justifyContent","alignItems","padding"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { View, Text, StyleSheet, FlatList, Image, TouchableOpacity } from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\nimport SearchBar from './Components/SearchBar';\r\n\r\nexport default function Home({navigation, route}) {\r\n\r\n    const [sender, setSender] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getData(){\r\n            const response = await fetch('https://mobile.ect.ufrn.br:3002/emails');\r\n            const sender = await response.json();\r\n            setSender(sender);\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n\r\n    function renderItem({item}){\r\n        return (\r\n        <TouchableOpacity\r\n        style={styles.senderBox} \r\n        activeOpacity={0.99} \r\n        onPress={() => { navigation.navigate('Email', {id: item})}}\r\n        >\r\n            <View style={styles.senderImgBox}>\r\n                <Image style={styles.senderImg}source={{uri: item.picture}}/>\r\n            </View>\r\n            <View style={styles.senderInfo}>\r\n                <Text style={{fontFamily: 'Arial',color: 'rgb(60,60,60)'}}>{item.to}</Text>\r\n                <Text style={{color: 'rgb(90,90,90)'}}>{item.tittle}</Text>\r\n                <Text style={{color: 'grey'}}>{item.summary}</Text>\r\n            </View>\r\n            <View style={styles.senderTimeFav}>\r\n                <Text style={styles.timeText}>{item.time}</Text>\r\n                <Icon name={item.star ? 'star' : 'star-outline'} style={{fontSize: 22}} color={item.star ? 'orange' : 'rgb(90,90,90)'}/>\r\n            </View>\r\n        </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n        <SearchBar dados={sender}/>\r\n        <View>\r\n            <FlatList\r\n            data={sender}\r\n            renderItem={renderItem}\r\n            keyExtractor={item => item.id}\r\n            />\r\n        </View>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#fff',\r\n      marginTop: Constants.statusBarHeight\r\n    },\r\n    senderBox: {\r\n        flex: 1,\r\n        height: 100,\r\n        flexDirection: 'row',\r\n    },\r\n    senderImg: {    \r\n           width: 40,\r\n           height: 40,\r\n           borderRadius: 20\r\n    },\r\n    senderImgBox: {\r\n        marginVertical: 20,\r\n        marginHorizontal: 15,\r\n    },\r\n    senderInfo: {\r\n        flex: 5,\r\n        justifyContent: 'center'\r\n    },\r\n    senderTimeFav: {\r\n        flex: 1,\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-evenly',\r\n        padding: 10\r\n    },\r\n    timeText: {\r\n        color: 'rgb(90,90,90)',\r\n        fontSize: 12\r\n    }\r\n  });"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport MIcon from \"@expo/vector-icons/MaterialIcons\";\nimport { useFonts } from 'expo-font';\nexport default function UserInfo(props) {\n  var dados = props.dados;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      arrowFx = _useState2[0],\n      setArrowFx = _useState2[1];\n\n  var rotation = new Animated.Value(0);\n\n  var rotaOn = function rotaOn() {\n    Animated.timing(rotation, {\n      toValue: 1,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n    setTimeout(function () {\n      setArrowFx(true);\n    }, 300);\n  };\n\n  var rotaOff = function rotaOff() {\n    Animated.timing(rotation, {\n      toValue: 0,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n    setTimeout(function () {\n      setArrowFx(false);\n    }, 300);\n  };\n\n  var renderInfo = function renderInfo(showOrHide) {\n    if (showOrHide) {\n      return React.createElement(View, {\n        style: styles.showDataView\n      }, React.createElement(View, {\n        style: {\n          marginRight: 10\n        }\n      }, React.createElement(Text, {\n        style: styles.textSpace\n      }, \"De\"), React.createElement(Text, {\n        style: styles.textSpace\n      }, \"Para\"), React.createElement(Text, {\n        style: styles.textSpace\n      }, \"Data\"), React.createElement(MIcon, {\n        name: \"lock-outline\",\n        size: 18,\n        style: styles.textSpace\n      })), React.createElement(View, null, React.createElement(Text, {\n        style: styles.textSpace\n      }, dados.from), React.createElement(Text, {\n        style: styles.textSpace\n      }, dados.to), React.createElement(Text, {\n        style: styles.textSpace\n      }, dados.time), React.createElement(Text, {\n        style: styles.textSpace\n      }, \"Criptografia padr\\xE3o.\")));\n    } else {\n      return null;\n    }\n  };\n\n  console.log(arrowFx);\n  return React.createElement(View, null, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, null, React.createElement(Image, {\n    source: {\n      uri: dados.picture\n    },\n    style: styles.senderPicture\n  })), React.createElement(View, {\n    style: styles.infoBox\n  }, React.createElement(Text, {\n    style: styles.senderName\n  }, dados.from, \"  \", React.createElement(Text, {\n    style: styles.timeView\n  }, dados.time)), React.createElement(TouchableOpacity, {\n    style: styles.toMeView,\n    activeOpacity: 1,\n    onPress: arrowFx ? rotaOff : rotaOn\n  }, React.createElement(Text, {\n    style: styles.toMeText\n  }, \"para \", dados.to), React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        rotate: rotation.interpolate({\n          inputRange: [0, 1],\n          outputRange: ['0deg', '180deg']\n        })\n      }]\n    }\n  }, React.createElement(Icon, {\n    name: \"chevron-down-outline\",\n    style: {\n      fontSize: 15\n    },\n    color: \"grey\"\n  }))))), renderInfo(arrowFx));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    paddingHorizontal: 10\n  },\n  infoBox: {\n    justifyContent: 'space-between'\n  },\n  toMeView: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 5\n  },\n  senderPicture: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    marginRight: 15\n  },\n  senderName: {\n    fontSize: 15,\n    fontFamily: 'QsSemiBold',\n    marginTop: -3\n  },\n  toMeText: {\n    color: 'rgb(90,90,90)',\n    marginRight: 5\n  },\n  timeView: {\n    fontSize: 13,\n    color: 'rgb(90,90,90)',\n    fontWeight: 'normal',\n    fontFamily: 'AssistantMedium'\n  },\n  showDataView: {\n    flexDirection: 'row',\n    borderColor: 'rgb(90,90,90)',\n    marginTop: 15,\n    marginHorizontal: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderWidth: 1,\n    borderRadius: 7\n  },\n  textSpace: {\n    marginVertical: 4,\n    color: 'rgb(90,90,90)'\n  }\n});","map":{"version":3,"sources":["C:/Users/lenil/Documents/Estudos/Aulas/trabaho1/pages/Email/Components/UserInfo.js"],"names":["React","useState","useEffect","useRef","Icon","MIcon","useFonts","UserInfo","props","dados","arrowFx","setArrowFx","rotation","Animated","Value","rotaOn","timing","toValue","duration","useNativeDriver","start","setTimeout","rotaOff","renderInfo","showOrHide","styles","showDataView","marginRight","textSpace","from","to","time","console","log","container","uri","picture","senderPicture","infoBox","senderName","timeView","toMeView","toMeText","transform","rotate","interpolate","inputRange","outputRange","fontSize","StyleSheet","create","flexDirection","paddingHorizontal","justifyContent","alignItems","marginTop","width","height","borderRadius","fontFamily","color","fontWeight","borderColor","marginHorizontal","paddingVertical","borderWidth","marginVertical"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;;;;;;;AAEA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAEpC,MAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;;AACA,kBAA8BR,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOS,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAjB;;AAEI,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBF,IAAAA,QAAQ,CAACG,MAAT,CAAgBJ,QAAhB,EAA0B;AAC1BK,MAAAA,OAAO,EAAE,CADiB;AAE1BC,MAAAA,QAAQ,EAAE,GAFgB;AAG1BC,MAAAA,eAAe,EAAE;AAHS,KAA1B,EAIGC,KAJH;AAKAC,IAAAA,UAAU,CAAC,YAAM;AACbV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KAFS,EAEP,GAFO,CAAV;AAGH,GATD;;AAWA,MAAMW,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBT,IAAAA,QAAQ,CAACG,MAAT,CAAgBJ,QAAhB,EAA0B;AAC1BK,MAAAA,OAAO,EAAE,CADiB;AAE1BC,MAAAA,QAAQ,EAAE,GAFgB;AAG1BC,MAAAA,eAAe,EAAE;AAHS,KAA1B,EAIGC,KAJH;AAKAC,IAAAA,UAAU,CAAC,YAAM;AACbV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAFS,EAEP,GAFO,CAAV;AAGH,GATD;;AAWA,MAAMY,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAgB;AAC/B,QAAGA,UAAH,EAAc;AACd,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,WAAW,EAAE;AAAd;AAAb,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG;AAApB,cADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACG;AAApB,gBAFJ,EAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACG;AAApB,gBAHJ,EAII,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,cAAZ;AAA2B,QAAA,IAAI,EAAE,EAAjC;AAAqC,QAAA,KAAK,EAAEH,MAAM,CAACG;AAAnD,QAJJ,CADJ,EAOI,oBAAC,IAAD,QACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACG;AAApB,SAAgCnB,KAAK,CAACoB,IAAtC,CADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEJ,MAAM,CAACG;AAApB,SAAgCnB,KAAK,CAACqB,EAAtC,CAFJ,EAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACG;AAApB,SAAgCnB,KAAK,CAACsB,IAAtC,CAHJ,EAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACG;AAApB,mCAJJ,CAPJ,CADJ;AAgBC,KAjBD,MAiBO;AACH,aAAO,IAAP;AACH;AACJ,GArBD;;AAuBAI,EAAAA,OAAO,CAACC,GAAR,CAAYvB,OAAZ;AAEJ,SACI,oBAAC,IAAD,QACA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEe,MAAM,CAACS;AAApB,KACI,oBAAC,IAAD,QACI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE1B,KAAK,CAAC2B;AAAb,KAAf;AAAsC,IAAA,KAAK,EAAEX,MAAM,CAACY;AAApD,IADJ,CADJ,EAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEZ,MAAM,CAACa;AAApB,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACc;AAApB,KAAiC9B,KAAK,CAACoB,IAAvC,QAA8C,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACe;AAApB,KAA+B/B,KAAK,CAACsB,IAArC,CAA9C,CADJ,EAEI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEN,MAAM,CAACgB,QAAhC;AAA0C,IAAA,aAAa,EAAE,CAAzD;AAA4D,IAAA,OAAO,EAAE/B,OAAO,GAAGY,OAAH,GAAaP;AAAzF,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACiB;AAApB,cAAoCjC,KAAK,CAACqB,EAA1C,CADJ,EAEI,oBAAC,QAAD,CAAU,IAAV;AACA,IAAA,KAAK,EAAE;AAACa,MAAAA,SAAS,EAAE,CAAC;AAACC,QAAAA,MAAM,EAAEhC,QAAQ,CAACiC,WAAT,CAAqB;AAC1CC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD8B;AAE1CC,UAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,QAAT;AAF6B,SAArB;AAAT,OAAD;AAAZ;AADP,KAQI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,sBAAX;AAAkC,IAAA,KAAK,EAAE;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAzC;AAAyD,IAAA,KAAK,EAAC;AAA/D,IARJ,CAFJ,CAFJ,CAJJ,CADA,EAsBKzB,UAAU,CAACb,OAAD,CAtBf,CADJ;AA0BH;AAED,IAAMe,MAAM,GAAGwB,UAAU,CAACC,MAAX,CAAkB;AAC7BhB,EAAAA,SAAS,EAAE;AACPiB,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,iBAAiB,EAAE;AAFZ,GADkB;AAK7Bd,EAAAA,OAAO,EAAE;AACLe,IAAAA,cAAc,EAAE;AADX,GALoB;AAQ7BZ,EAAAA,QAAQ,EAAE;AACNU,IAAAA,aAAa,EAAE,KADT;AAENG,IAAAA,UAAU,EAAE,QAFN;AAGNC,IAAAA,SAAS,EAAE;AAHL,GARmB;AAa7BlB,EAAAA,aAAa,EAAE;AACXmB,IAAAA,KAAK,EAAE,EADI;AAEXC,IAAAA,MAAM,EAAE,EAFG;AAGXC,IAAAA,YAAY,EAAE,EAHH;AAIX/B,IAAAA,WAAW,EAAE;AAJF,GAbc;AAmB7BY,EAAAA,UAAU,EAAE;AACRS,IAAAA,QAAQ,EAAE,EADF;AAERW,IAAAA,UAAU,EAAE,YAFJ;AAGRJ,IAAAA,SAAS,EAAE,CAAC;AAHJ,GAnBiB;AAwB7Bb,EAAAA,QAAQ,EAAE;AACNkB,IAAAA,KAAK,EAAE,eADD;AAENjC,IAAAA,WAAW,EAAE;AAFP,GAxBmB;AA4B7Ba,EAAAA,QAAQ,EAAE;AACNQ,IAAAA,QAAQ,EAAE,EADJ;AAENY,IAAAA,KAAK,EAAE,eAFD;AAGNC,IAAAA,UAAU,EAAE,QAHN;AAINF,IAAAA,UAAU,EAAE;AAJN,GA5BmB;AAkC7BjC,EAAAA,YAAY,EAAE;AACVyB,IAAAA,aAAa,EAAE,KADL;AAEVW,IAAAA,WAAW,EAAE,eAFH;AAGVP,IAAAA,SAAS,EAAE,EAHD;AAIVQ,IAAAA,gBAAgB,EAAE,EAJR;AAKVX,IAAAA,iBAAiB,EAAE,EALT;AAMVY,IAAAA,eAAe,EAAE,CANP;AAOVC,IAAAA,WAAW,EAAE,CAPH;AAQVP,IAAAA,YAAY,EAAE;AARJ,GAlCe;AA4C7B9B,EAAAA,SAAS,EAAE;AACPsC,IAAAA,cAAc,EAAE,CADT;AAEPN,IAAAA,KAAK,EAAE;AAFA;AA5CkB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\nimport { Image, StyleSheet, Text, View, TouchableOpacity, Animated } from 'react-native'\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\nimport MIcon from 'react-native-vector-icons/MaterialIcons';\r\nimport { useFonts } from 'expo-font';\r\n\r\nexport default function UserInfo(props) {\r\n\r\n    const dados = props.dados\r\n    const [arrowFx, setArrowFx] = useState(false)\r\n    const rotation = new Animated.Value(0);\r\n\r\n        const rotaOn = () => {\r\n            Animated.timing(rotation, {\r\n            toValue: 1,\r\n            duration: 200,\r\n            useNativeDriver: false\r\n            }).start();\r\n            setTimeout(() => {\r\n                setArrowFx(true)\r\n            }, 300);\r\n        };\r\n\r\n        const rotaOff = () => {\r\n            Animated.timing(rotation, {\r\n            toValue: 0,\r\n            duration: 200,\r\n            useNativeDriver: false\r\n            }).start();\r\n            setTimeout(() => {\r\n                setArrowFx(false)\r\n            }, 300);\r\n        }\r\n\r\n        const renderInfo = (showOrHide) => {\r\n            if(showOrHide){\r\n            return(\r\n                <View style={styles.showDataView}>\r\n                    <View style={{marginRight: 10}}>\r\n                        <Text style={styles.textSpace}>De</Text>\r\n                        <Text style={styles.textSpace}>Para</Text>\r\n                        <Text style={styles.textSpace}>Data</Text>\r\n                        <MIcon name='lock-outline' size={18} style={styles.textSpace}></MIcon>\r\n                    </View>\r\n                    <View>\r\n                        <Text style={styles.textSpace}>{dados.from}</Text>\r\n                        <Text style={styles.textSpace}>{dados.to}</Text>\r\n                        <Text style={styles.textSpace}>{dados.time}</Text>\r\n                        <Text style={styles.textSpace}>Criptografia padrão.</Text>\r\n                    </View>\r\n                </View>\r\n            )\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        \r\n        console.log(arrowFx)\r\n\r\n    return (\r\n        <View>\r\n        <View style={styles.container}>\r\n            <View>\r\n                <Image source={{ uri: dados.picture}} style={styles.senderPicture}/>\r\n            </View>\r\n            <View style={styles.infoBox}>\r\n                <Text style={styles.senderName}>{dados.from}  <Text style={styles.timeView}>{dados.time}</Text></Text>\r\n                <TouchableOpacity style={styles.toMeView} activeOpacity={1} onPress={arrowFx ? rotaOff : rotaOn}>\r\n                    <Text style={styles.toMeText}>para {dados.to}</Text>\r\n                    <Animated.View \r\n                    style={{transform: [{rotate: rotation.interpolate({\r\n                            inputRange: [0, 1],\r\n                            outputRange: ['0deg', '180deg'],\r\n                                })\r\n                            }]\r\n                        }}\r\n                    >\r\n                        <Icon name=\"chevron-down-outline\" style={{fontSize: 15}} color='grey'/>\r\n                    </Animated.View>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View>\r\n            {renderInfo(arrowFx)}\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: 'row',\r\n        paddingHorizontal: 10,\r\n    },\r\n    infoBox: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    toMeView: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginTop: 5\r\n    },\r\n    senderPicture: {\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 20,\r\n        marginRight: 15\r\n    },\r\n    senderName: {\r\n        fontSize: 15,\r\n        fontFamily: 'QsSemiBold',\r\n        marginTop: -3\r\n    },\r\n    toMeText: {\r\n        color: 'rgb(90,90,90)',\r\n        marginRight: 5,\r\n    },\r\n    timeView: {\r\n        fontSize: 13,\r\n        color: 'rgb(90,90,90)',\r\n        fontWeight: 'normal',\r\n        fontFamily: 'AssistantMedium'\r\n    },\r\n    showDataView: {\r\n        flexDirection: 'row',\r\n        borderColor: 'rgb(90,90,90)',\r\n        marginTop: 15,\r\n        marginHorizontal: 10,\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 5,\r\n        borderWidth: 1,\r\n        borderRadius: 7\r\n    },\r\n    textSpace: {\r\n        marginVertical: 4,\r\n        color: 'rgb(90,90,90)'\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}